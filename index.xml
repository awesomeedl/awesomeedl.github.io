<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Edward Liao</title><link>http://awesomeedl.github.io/</link><description>Recent content on Edward Liao</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Feb 2023 10:50:40 +0800</lastBuildDate><atom:link href="http://awesomeedl.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning Journey: Azure Functions</title><link>http://awesomeedl.github.io/azure_func/</link><pubDate>Mon, 13 Feb 2023 10:50:40 +0800</pubDate><guid>http://awesomeedl.github.io/azure_func/</guid><description>Edward Liao http://awesomeedl.github.io/azure_func/ -&lt;h1 id="background">Background&lt;/h1>
&lt;p>After dipping my toes into the water of using .NET to write RESTful APIs, soon enough I find myself amazed by the number of tools, platforms, and options available in the .NET ecosystem. Recently I had the idea of writing a monthly expense tracking app, which I thought would be the perfect opportunity to experiment with different things in .Net and Azure that I haven&amp;rsquo;t touched before.&lt;/p>
&lt;h1 id="the-goals">The Goals&lt;/h1>
&lt;p>My main goal is to have a basic CRUD API available for my front end to add, retrieve, and update transactions. I would also like all of my stuff to be on the cloud as I didn&amp;rsquo;t feel like wrestling with hosting stuff myself. With that in mind, I have a couple of decisions to make:&lt;/p>
&lt;h1 id="the-tools">The Tools&lt;/h1>
&lt;h2 id="cloud-provider---azure">Cloud Provider - Azure&lt;/h2>
&lt;p>As the title suggests, I went with Azure. I probably could have gone with a cheaper option but I thought learning it might be a nice addition to my skill set. It&amp;rsquo;s also convenient that since I would be working with .Net stuff, they would integrate nicely.&lt;/p>
&lt;h2 id="database---azure-sql">Database - Azure SQL&lt;/h2>
&lt;p>Since I have worked with Azure SQL before, I might as well stick with it. It&amp;rsquo;s easy to set up and once I did I can forget about it. Initially, I also had the itch to try out a document database like CosmosDB and MongoDB but I soon decided it was a rabbit hole destined for another project.&lt;/p>
&lt;h2 id="net-core-web-api-or-is-there-another-option">.NET Core Web API, or is there another option?&lt;/h2>
&lt;p>My last CRUD app was written as a .Net web API, hosted on Azure as a Web App Service. It was easy to deploy and suited my need, with only one problem &amp;ndash; &lt;strong>Cost&lt;/strong>. Azure Web App Service incurs charges as long as it is running, no matter how few requests it receives. Since this is a hobby project I probably will only have a single digit amount of requests each day, I did not like the fact that I would be paying for all the time the web app is running idle.&lt;/p>
&lt;h2 id="azure-functions">Azure Functions&lt;/h2>
&lt;p>I then learned that I can write my API as Azure Functions, a serverless SaaS solution that&amp;rsquo;s very similar to a .Net Core web app, with the added benefit of being more modular as every endpoint is represented by its own function. The best part is, it will charge me &lt;strong>per request&lt;/strong>! Definitely sounds like the perfect candidate for my needs! (And I will also have another thing to brag about on my resume)&lt;/p>
&lt;h1 id="the-confusion-begins">The Confusion Begins&amp;hellip;&lt;/h1>
&lt;h2 id="what-is-csx">&amp;ldquo;What is .csx?&amp;rdquo;&lt;/h2>
&lt;p>After some setting up, it seems that AF can be written as a traditional &lt;code>.cs&lt;/code> file, which I need to use an IDE for. Or, I could write it as a C# script &lt;code>.csx&lt;/code> file, which could be edited directly on the Azure Portal, how cool is that! (spoiler: it&amp;rsquo;s not).&lt;/p>
&lt;h2 id="what-is-an-sql-binding">&amp;ldquo;What is an SQL binding??&amp;rdquo;&lt;/h2>
&lt;p>Since I am writing a CRUD API, obviously I need some way to query the database within my web app. In the previous .Net Core project, I used Entity Framework Core, so &lt;em>&amp;ldquo;maybe I could use that here?&amp;rdquo;&lt;/em> &amp;ndash; the naive me thought. A quick Google search yielded &amp;ndash; nothing. Welp, time to look for another solution! I then came across &lt;a href="https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-azure-sql?tabs=in-process%2Cextensionv4&amp;amp;pivots=programming-language-csharp">this official doc page&lt;/a> that seems to be what I need &amp;ndash; I just need to write an HTTP trigger function with SQL input binding for each get endpoint, and SQL output binding for each post endpoint, which seems easy enough. (spoiler: it&amp;rsquo;s not)&lt;/p>
&lt;h1 id="going-back-to-the-old-recipe">Going back to the old recipe&lt;/h1>
&lt;p>After digging through the non-existent documentation and Stackoverflow posts on what I was trying to do, I finally gave up on writing the &lt;code>.csx&lt;/code> files and went back to writing &lt;code>.cs&lt;/code> with VS Code. Suddenly, all the documentation started making sense and I had finally made a working endpoint that retrieves all the records in my database table.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb">[FunctionName(&amp;#34;GetAllTransactions&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">public&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">static&lt;/span> IActionResult Run&lt;span style="color:#eceff4">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb"> [HttpTrigger(AuthorizationLevel.Anonymous, &amp;#34;get&amp;#34;, Route = null)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpRequest req&lt;span style="color:#eceff4">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb"> [Sql(&amp;#34;select * from dbo.Transactions&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb"> CommandType = System.Data.CommandType.Text,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb"> ConnectionStringSetting = &amp;#34;SqlConnectionString&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IEnumerable&lt;span style="color:#eceff4">&amp;lt;&lt;/span>Transaction&lt;span style="color:#eceff4">&amp;gt;&lt;/span> transactions&lt;span style="color:#eceff4">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">return&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">new&lt;/span> OkObjectResult&lt;span style="color:#eceff4">(&lt;/span>transactions&lt;span style="color:#eceff4">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Apparently, I overlooked the fact that the documentation was intended for regular old &lt;code>.cs&lt;/code> functions and not &lt;code>.csx&lt;/code> functions. Things finally started making sense.&lt;/p>
&lt;p>HTTP Trigger + SQL Binding worked pretty nicely so far until I decided to allow query parameters on my endpoints, which looked something like this:&lt;br>
&lt;code>http://myapiurl/gettransaction?month=2&amp;amp;type=food&lt;/code>&lt;br>
I soon realized the problem &amp;ndash; The SQL statement &lt;code>[Sql(&amp;quot;some SQL query&amp;quot;)]&lt;/code>was predetermined, and there was no way I could generate statements based on parameters in the request&amp;rsquo;s query string! It seems that going back to Entity Framework Core was inevitable&amp;hellip;&lt;/p>
&lt;h2 id="getting-entity-framework-core-to-work-with-azure-functions">&amp;ldquo;Getting Entity Framework Core to work with Azure Functions&amp;rdquo;&lt;/h2>
&lt;p>Setting up EF Core in a .Net Core project was not easy, but at least doable thanks to the documentation available online. It was, however, not a good experience trying to add EF Core into my Azure Functions. After many hours of digging through documentation and pulling my hair out, I &lt;strong>FINALLY&lt;/strong> got it to work.&lt;/p>
&lt;p>The first step is to install the packages required for EF Core, which I did by adding the following two lines to the &lt;code>.csproj&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#8fbcbb">Include=&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;Microsoft.EntityFrameworkCore&amp;#34;&lt;/span> &lt;span style="color:#8fbcbb">Version=&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;6.*&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#8fbcbb">Include=&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;Microsoft.EntityFrameworkCore.SqlServer&amp;#34;&lt;/span> &lt;span style="color:#8fbcbb">Version=&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;6.*&amp;#34;&lt;/span> &lt;span style="color:#81a1c1">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that I had to tell the app to specifically use the &lt;code>6.x&lt;/code> version, which is the latest .Net version that Azure Function supports. If I leave the version blank it will use the &lt;code>7.x&lt;/code> versions which will cause the build to fail.&lt;/p>
&lt;p>I then need to create a &lt;code>Startup.cs&lt;/code> file to configure the builder services like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb">[assembly: FunctionsStartup(typeof(MoneyTrackAPI.Startup))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">namespace&lt;/span> &lt;span style="color:#8fbcbb">MoneyTrackAPI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">public&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">class&lt;/span> &lt;span style="color:#8fbcbb">Startup&lt;/span> &lt;span style="color:#eceff4">:&lt;/span> FunctionsStartup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">public&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">override&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">void&lt;/span> Configure&lt;span style="color:#eceff4">(&lt;/span>IFunctionsHostBuilder builder&lt;span style="color:#eceff4">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder&lt;span style="color:#eceff4">.&lt;/span>Services&lt;span style="color:#eceff4">.&lt;/span>AddDbContext&lt;span style="color:#eceff4">&amp;lt;&lt;/span>DbContext&lt;span style="color:#eceff4">&amp;gt;(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options &lt;span style="color:#eceff4">=&amp;gt;&lt;/span> SqlServerDbContextOptionsExtensions&lt;span style="color:#eceff4">.&lt;/span>UseSqlServer&lt;span style="color:#eceff4">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> options&lt;span style="color:#eceff4">,&lt;/span> Environment&lt;span style="color:#eceff4">.&lt;/span>GetEnvironmentVariable&lt;span style="color:#eceff4">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a3be8c">&amp;#34;SQLAZURECONNSTR_ConnectionString&amp;#34;&lt;/span>&lt;span style="color:#eceff4">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, I can finally do the usual &lt;code>dotnet ef dbcontext scaffold&lt;/code> command to generate the &lt;code>DbContext.cs&lt;/code> and &lt;code>Transaction.cs&lt;/code> file which allows me to query the database using LINQ, which means I can successfully call the get endpoint with query parameters. The actual function looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">public&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">class&lt;/span> &lt;span style="color:#8fbcbb">GetTransactions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">private&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">readonly&lt;/span> DbContext _dbContext&lt;span style="color:#eceff4">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">public&lt;/span> GetTransactions&lt;span style="color:#eceff4">(&lt;/span>DbContext dbContext&lt;span style="color:#eceff4">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _dbContext &lt;span style="color:#eceff4">=&lt;/span> dbContext&lt;span style="color:#eceff4">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb"> [FunctionName(&amp;#34;GetTransactions&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">public&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">async&lt;/span> Task&lt;span style="color:#eceff4">&amp;lt;&lt;/span>IActionResult&lt;span style="color:#eceff4">&amp;gt;&lt;/span> Run&lt;span style="color:#eceff4">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8fbcbb"> [HttpTrigger(AuthorizationLevel.Anonymous, &amp;#34;get&amp;#34;, Route = &amp;#34;transaction&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpRequest req&lt;span style="color:#eceff4">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ILogger log&lt;span style="color:#eceff4">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">var&lt;/span> query &lt;span style="color:#eceff4">=&lt;/span> req&lt;span style="color:#eceff4">.&lt;/span>Query&lt;span style="color:#eceff4">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1">var&lt;/span> transactions &lt;span style="color:#eceff4">=&lt;/span> _dbContext&lt;span style="color:#eceff4">.&lt;/span>Transactions&lt;span style="color:#eceff4">.&lt;/span>AsNoTracking&lt;span style="color:#eceff4">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">if&lt;/span> &lt;span style="color:#eceff4">(&lt;/span>query&lt;span style="color:#eceff4">.&lt;/span>ContainsKey&lt;span style="color:#eceff4">(&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;month&amp;#34;&lt;/span>&lt;span style="color:#eceff4">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transactions &lt;span style="color:#eceff4">=&lt;/span> transactions&lt;span style="color:#eceff4">.&lt;/span>Where&lt;span style="color:#eceff4">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#eceff4">=&amp;gt;&lt;/span> t&lt;span style="color:#eceff4">.&lt;/span>TransactionDate&lt;span style="color:#eceff4">.&lt;/span>Month &lt;span style="color:#eceff4">==&lt;/span> &lt;span style="color:#81a1c1">int&lt;/span>&lt;span style="color:#eceff4">.&lt;/span>Parse&lt;span style="color:#eceff4">(&lt;/span>query&lt;span style="color:#eceff4">[&lt;/span>&lt;span style="color:#a3be8c">&amp;#34;month&amp;#34;&lt;/span>&lt;span style="color:#eceff4">]));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">catch&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">return&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">new&lt;/span> BadRequestResult&lt;span style="color:#eceff4">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">return&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">new&lt;/span> OkObjectResult&lt;span style="color:#eceff4">(&lt;/span>&lt;span style="color:#81a1c1;font-weight:bold">await&lt;/span> transactions&lt;span style="color:#eceff4">.&lt;/span>ToListAsync&lt;span style="color:#eceff4">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Voila! After jumping through so many hoops I finally have a GET endpoint that functions like how I wanted. Notice when I want to match more parameters in the query string I can simply add another &lt;code>if (query.ContainsKey()) {}&lt;/code> block, and EF Core will generate the SQL query behind the scene. What&amp;rsquo;s left for me to do is adding the POST and UPDATE endpoints, which should be trivial.&lt;/p>
- http://awesomeedl.github.io/azure_func/ -</description></item><item><title>About Me</title><link>http://awesomeedl.github.io/about/</link><pubDate>Wed, 04 Jan 2023 22:28:25 +0800</pubDate><guid>http://awesomeedl.github.io/about/</guid><description>Edward Liao http://awesomeedl.github.io/about/ -&lt;p>[&lt;a href="https://www.linkedin.com/in/edwardliao125/">Linkedin&lt;/a>] [&lt;a href="https://github.com/awesomeedl">GitHub&lt;/a>]&lt;/p>
- http://awesomeedl.github.io/about/ -</description></item><item><title>Conway's Game of Life</title><link>http://awesomeedl.github.io/conway_game_of_life/</link><pubDate>Thu, 29 Sep 2022 15:10:04 +0800</pubDate><guid>http://awesomeedl.github.io/conway_game_of_life/</guid><description>Edward Liao http://awesomeedl.github.io/conway_game_of_life/ -&lt;blockquote>
&lt;p>&amp;ldquo;The &lt;strong>Game of Life&lt;/strong> &amp;hellip; &amp;hellip; is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves. It is Turing complete and can simulate a universal constructor or any other Turing machine.&amp;rdquo; -- Wikipedia&lt;/p>
&lt;/blockquote>
&lt;p>I was introduced to Conway&amp;rsquo;s Game of Life by my college roomate who was also studying computer science. During my college study, one of the courses taught us about Turing machines, a fascinating concept of what makes a &amp;lsquo;computer&amp;rsquo;. It is both simple and complicated at the same time. One thing led to another and soon I found myself researching
&amp;ldquo;turing complete languages&amp;rdquo;, and Conway&amp;rsquo;s game of life immediately stood out as one of if not the most interesting one.&lt;/p>
&lt;p>The entire simulation can be summarized by the following rules:&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Any live cell with two or three live neighbours survives.&lt;/li>
&lt;li>Any dead cell with three live neighbours becomes a live cell.&lt;/li>
&lt;li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>In my code, the three rules translate into this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#81a1c1;font-weight:bold">function&lt;/span> recalculate&lt;span style="color:#eceff4">()&lt;/span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">for&lt;/span>&lt;span style="color:#eceff4">(&lt;/span>&lt;span style="color:#81a1c1;font-weight:bold">let&lt;/span> x &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#b48ead">0&lt;/span>&lt;span style="color:#eceff4">;&lt;/span> x &lt;span style="color:#81a1c1">&amp;lt;&lt;/span> grid&lt;span style="color:#eceff4">.&lt;/span>length&lt;span style="color:#eceff4">;&lt;/span> x&lt;span style="color:#81a1c1">++&lt;/span>&lt;span style="color:#eceff4">)&lt;/span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">for&lt;/span>&lt;span style="color:#eceff4">(&lt;/span>&lt;span style="color:#81a1c1;font-weight:bold">let&lt;/span> y &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#b48ead">0&lt;/span>&lt;span style="color:#eceff4">;&lt;/span> y &lt;span style="color:#81a1c1">&amp;lt;&lt;/span> grid&lt;span style="color:#eceff4">[&lt;/span>x&lt;span style="color:#eceff4">].&lt;/span>length&lt;span style="color:#eceff4">;&lt;/span> y&lt;span style="color:#81a1c1">++&lt;/span>&lt;span style="color:#eceff4">)&lt;/span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">let&lt;/span> count &lt;span style="color:#81a1c1">=&lt;/span> calculateNeighbor&lt;span style="color:#eceff4">(&lt;/span>x&lt;span style="color:#eceff4">,&lt;/span> y&lt;span style="color:#eceff4">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">if&lt;/span>&lt;span style="color:#eceff4">(&lt;/span>grid&lt;span style="color:#eceff4">[&lt;/span>x&lt;span style="color:#eceff4">][&lt;/span>y&lt;span style="color:#eceff4">][&lt;/span>&lt;span style="color:#b48ead">0&lt;/span>&lt;span style="color:#eceff4">]&lt;/span> &lt;span style="color:#81a1c1">===&lt;/span> &lt;span style="color:#b48ead">1&lt;/span>&lt;span style="color:#eceff4">)&lt;/span> &lt;span style="color:#eceff4">{&lt;/span> &lt;span style="color:#616e87;font-style:italic">// Alive
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">if&lt;/span> &lt;span style="color:#eceff4">(&lt;/span>count &lt;span style="color:#81a1c1">&amp;lt;&lt;/span> &lt;span style="color:#b48ead">2&lt;/span> &lt;span style="color:#81a1c1">||&lt;/span> count &lt;span style="color:#81a1c1">&amp;gt;&lt;/span> &lt;span style="color:#b48ead">3&lt;/span>&lt;span style="color:#eceff4">)&lt;/span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid&lt;span style="color:#eceff4">[&lt;/span>x&lt;span style="color:#eceff4">][&lt;/span>y&lt;span style="color:#eceff4">][&lt;/span>&lt;span style="color:#b48ead">1&lt;/span>&lt;span style="color:#eceff4">]&lt;/span> &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#b48ead">0&lt;/span>&lt;span style="color:#eceff4">;&lt;/span> &lt;span style="color:#616e87;font-style:italic">// Mark for deletion
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">&lt;/span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#81a1c1;font-weight:bold">else&lt;/span> &lt;span style="color:#eceff4">{&lt;/span> &lt;span style="color:#616e87;font-style:italic">// Dead
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">&lt;/span> &lt;span style="color:#81a1c1;font-weight:bold">if&lt;/span>&lt;span style="color:#eceff4">(&lt;/span>count &lt;span style="color:#81a1c1">===&lt;/span> &lt;span style="color:#b48ead">3&lt;/span>&lt;span style="color:#eceff4">)&lt;/span> &lt;span style="color:#eceff4">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid&lt;span style="color:#eceff4">[&lt;/span>x&lt;span style="color:#eceff4">][&lt;/span>y&lt;span style="color:#eceff4">][&lt;/span>&lt;span style="color:#b48ead">1&lt;/span>&lt;span style="color:#eceff4">]&lt;/span> &lt;span style="color:#81a1c1">=&lt;/span> &lt;span style="color:#b48ead">1&lt;/span>&lt;span style="color:#eceff4">;&lt;/span> &lt;span style="color:#616e87;font-style:italic">// Mark for creation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#616e87;font-style:italic">&lt;/span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#eceff4">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A remarkably simple set of rules create such complex behaviors.&lt;/p>
- http://awesomeedl.github.io/conway_game_of_life/ -</description></item><item><title>Behind The Scenes - My Personal Blog</title><link>http://awesomeedl.github.io/hugo/</link><pubDate>Wed, 21 Sep 2022 15:00:56 +0800</pubDate><guid>http://awesomeedl.github.io/hugo/</guid><description>Edward Liao http://awesomeedl.github.io/hugo/ -&lt;p>I have always wanted a centralized place to store and display all my projects, discoveries, and stories.
I know for a fact that I needed a static website to do this. However, I wasn&amp;rsquo;t too keen on writing all the HTML and CSS myself, it felt tedious.I also didn&amp;rsquo;t want to mess with all the JavaScript frontend libraries, as they are way too overkill and time consuming to learn.&lt;/p>
&lt;p>I stumbled upon the concept of a &amp;ldquo;static site generator&amp;rdquo; recently, and it blew my mind how well it fits my need - I just need to provide the content, and it will generate all the files needed for hosting the website! How neat!&lt;/p>
&lt;p>I settled on this specific site generator called &amp;ldquo;Hugo&amp;rdquo;, which is what I used to build this blog. It reads content written in Markdown (which is a lot easier then writing HTML and CSS) and generate the entire website according to a predefined template, which Hugo calls a &amp;ldquo;theme&amp;rdquo;. It also claims to be the fastest site generator, a nice little bonus.&lt;/p>
&lt;p>Now that I have the platform, I will start posting some of my past projects onto here, so stay tuned!&lt;/p>
- http://awesomeedl.github.io/hugo/ -</description></item></channel></rss>